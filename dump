import db
import psycopg2
from psycopg2 import sql
import json
import helper
from decimal import Decimal
from reportlab.lib import colors
from prettytable import PrettyTable
from pyfiglet import Figlet
from colorama import Fore, Back, Style, init
from flask import Flask, jsonify

app = Flask(__name__)

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            return float(o)
        return super(DecimalEncoder, self).default(o)


class TermAdmission:

    def __init__(self, _conn):
        self.conn =_conn
        self.cursor = self.conn.cursor()
    
    def create_term_admission_table(self):
        # Define the table schema with a JSON field for course details
        create_table_query = """
            CREATE TABLE IF NOT EXISTS tbl_ae_term_admission_bkp(
                "studentID" character varying(15) PRIMARY KEY,                
                term_admission_details JSONB,
                moduleregistration_details JSONB                                
            );
        """
        self.cursor.execute(create_table_query)
        self.conn.commit()

    def get_term_admission(self, studentID):
            # Execute the query
            query = f"""SELECT "termAdmissionID", "studentID", "sectionName", "batchName", "programmeCode", 
                            tra_term, tra_year, tra_date, "employeeID", "tra_finalExamRegistred", 
                            "tra_finalAdmitPrint", "tra_finalExamRegDate", withheld
                        FROM public.tbl_q_termadmission
                        WHERE "studentID"='{studentID}'
                        ORDER BY "termAdmissionID"
                    """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")
   
    def get_exam_marks(self, studentID):
            # Execute the query
            query = f"""SELECT e."examinationID", e."moduleRegistrationID", e.emr_date, e.emr_mark, e.emr_absent, e."facultyID", e.supple_regi_date, 
                                e."userID", e.emr_complete, e.emr_publish
                        FROM public.tbl_u_exammarks e, public.tbl_q_termadmission t, public.tbl_s_moduleregistration m
                        WHERE t."termAdmissionID" = m."termAdmissionID" AND m."moduleRegistrationID" = e."moduleRegistrationID" AND
                              t."studentID" = '{studentID}';                     
                    """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")

    def get_final_exam_marks(self, moduleRegistrationID):
            # Execute the query
            query = f"""SELECT "examinationID", "moduleRegistrationID", emr_date, emr_mark, 
                            emr_absent, "facultyID", supple_regi_date, "userID", emr_complete, 
                            emr_publish
                        FROM public.tbl_u_exammarks
                        WHERE "moduleRegistrationID"='{moduleRegistrationID}';

                    """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")

    def get_student_list(self):
            # Execute the query
            query = f"""SELECT s."studentID" FROM public.tbl_o_student s WHERE s."stu_academicYear" >= 2015 """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")    
    
    def reterive_data(self, studentID):
            # Execute the query
            query = f"""SELECT "studentID", term_admission_details, moduleregistration_details
                            FROM public.tbl_ae_term_admission_bkp
                            WHERE
                            "studentID"='{studentID}'
                     """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")    
        

    def get_module_registration(self, studentID):
            # Execute the query
            query = f"""SELECT m."moduleRegistrationID", m."termAdmissionID", m."offeredModuleID", m.reg_date, m.reg_attendence, 
                                m."reg_classTest", m.reg_midterm, m."markingSchemeID", m.reg_type, m."reg_finalExamReg", m."reg_finalExamRegDate", 
                                m."reg_suppleExamReg", m."reg_suppleExamRegDate", m.reg_status, m."createdAt", m."updatedAt", m."userID", m."lastUpdatedAt"
                                FROM public.tbl_q_termadmission t, public.tbl_s_moduleregistration m
                                WHERE t."termAdmissionID" = m."termAdmissionID" AND t."studentID" = '{studentID}'
                    """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")

    def get_module_registration_details(self, termID):
            # Execute the query
            query = f"""
                        SELECT m."moduleRegistrationID", m."offeredModuleID", m.reg_date, m.reg_attendence, m."reg_classTest", m.reg_midterm, 
                            m."markingSchemeID", m.reg_type, m."reg_finalExamReg", m."reg_finalExamRegDate", m."reg_suppleExamReg", 
                            m."reg_suppleExamRegDate", m.reg_status, m."createdAt", m."updatedAt", m."userID", m."lastUpdatedAt", 
                            o."syllabusCode", o."moduleCode", o."facultyID", o."userID", o.ofm_term, o.ofm_year, s."syllabusCode", 
                            s."moduleCode", s.mod_name, s."mod_creditHour", s.mod_type, s."mod_labIncluded", s.mod_mejor, 
                            s.mod_group, s.mod_prerequisite, s.mod_sequence, s."mod_shortName"  
                        FROM  public.tbl_s_moduleregistration m,  public.tbl_h_offeredmodule o, public.tbl_e_module s
                        WHERE m."offeredModuleID" = o."offeredModuleID" AND  o."syllabusCode" = s."syllabusCode" AND  
                        o."moduleCode" = s."moduleCode" AND  m."termAdmissionID" = '{termID}'           
                    """
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")
    def format_term_admission_details_dict(self, data):
        try:
            term_details = {}        
            for i in range(0, len(data)):
                termAdmissionID = data[i][0]
                module = self.get_module_registration_details(termAdmissionID) 
                
                module_details = self.format_moduleregistration_details(module)
                
               # print(module_details)
                term_data = {
                   # "studentID": f"{data[i][1]}",
                    "sectionName": f"{data[i][2]}",
                    "batchName": data[i][3],
                    "programmeCode":f"{data[i][4]}",
                    "tra_term": data[i][5],
                    "tra_year": data[i][6],
                    "tra_date": f"{data[i][7]}",
                    "employeeID": f"{data[i][8]}",
                    "tra_finalExamRegistred": f"{data[i][9]}",
                    "withheld": f"{data[i][10]}",
                    "module_registration": module_details
                }
                
                term_details[termAdmissionID] = term_data
                rec = {
                     "studentID":"181-115-003",
                     "result" : term_details
                }

            return rec #term_details
        except:
             print("Data not found")
    
    def format_moduleregistration_details2(self, data):
        try: 
            module_regi_details = {}
            for i in range(0, len(data)):
                moduleRegistrationID = data[i][0]
                final = self.get_final_exam_marks(moduleRegistrationID)
                final_marks = self.format_final_marks_dict(final)
                regi_data = {                
                    "termAdmissionID": data[i][1],
                    "offeredModuleID": data[i][2],
                    "reg_date": f"{data[i][3]}",
                    "reg_attendence": f"{data[i][4]}",
                    "reg_classTest": data[i][5],
                    "markingSchemeID": data[i][6],
                    "reg_midterm": data[i][7],
                    "reg_type": f"{data[i][8]}",
                    "reg_finalExamReg": f"{data[i][9]}",
                    "reg_finalExamRegDate": f"{data[i][10]}",
                    "reg_suppleExamReg": f"{data[i][11]}",
                    "reg_suppleExamRegDate": f"{data[i][12]}",
                    "reg_status": f"{data[i][13]}",
                    "createdAt": f"{data[i][14]}",
                    "updatedAt": f"{data[i][15]}",                
                    "userID": data[i][16],
                    "lastUpdatedAt": f"{data[i][17]}",
                    "final" : final_marks
                }
                module_regi_details[moduleRegistrationID] = regi_data
            return module_regi_details
        except:
             print("Data Not FOund")
    
    def format_moduleregistration_details(self, data):
        try: 
            module_regi_details = {}
            for i in range(len(data)):
                moduleRegistrationID = data[i][0]                
                final = self.get_final_exam_marks(moduleRegistrationID)
                final_marks = self.format_final_marks_dict(final)
                print(data)
                SELECT m."moduleRegistrationID", m."offeredModuleID", m.reg_date, m.reg_attendence, m."reg_classTest", m.reg_midterm, 
                            m."markingSchemeID", m.reg_type, m."reg_finalExamReg", m."reg_finalExamRegDate", m."reg_suppleExamReg", 
                            m."reg_suppleExamRegDate", m.reg_status, m."createdAt", m."updatedAt", m."userID", m."lastUpdatedAt", 
                            o."syllabusCode", o."moduleCode", o."facultyID", o."userID", o.ofm_term, o.ofm_year, s."syllabusCode", 
                            s."moduleCode", s.mod_name, s."mod_creditHour", s.mod_type, s."mod_labIncluded", s.mod_mejor, 
                            s.mod_group, s.mod_prerequisite, s.mod_sequence, s."mod_shortName" 
                (254627, 15342, datetime.date(2018, 4, 7), 10.0, 14.0, 8.0, 1, 1, None, None, None, None, 'Regular', None, None, None, datetime.date(2023, 3, 19), 
                 'CSE-V3', 'CSE-111', 3680, None, 1, 2018, 'CSE-V3', 'CSE-111', 'Computer Technology', 3.0, 'None Lab', 'no', 'yes', 'Core', '', 1, 'CT22'),
                regi_data = {
                    "moduleRegistrationID": data[i][0],
                    "offeredModuleID": data[i][1],
                    "reg_date": str(data[i][2]),
                    "reg_attendence": str(data[i][3]),
                    "reg_classTest": data[i][4],
                    "reg_midterm": data[i][5],
                    "markingSchemeID": data[i][6],
                    "reg_type": str(data[i][7]),
                    "reg_finalExamReg": str(data[i][8]),
                    "reg_finalExamRegDate": str(data[i][9]),
                    "reg_suppleExamReg": str(data[i][10]),
                    "reg_suppleExamRegDate": str(data[i][11]),
                    "reg_status": str(data[i][12]),
                    "createdAt": str(data[i][13]),
                    "updatedAt": str(data[i][14]),
                    "userID": data[i][15],
                    "lastUpdatedAt": str(data[i][16]),
                    "syllabusCode": str(data[i][17]),
                    "moduleCode": str(data[i][18]),
                    "facultyID": data[i][19],
                    "ofm_term": data[i][20],
                    "ofm_year": data[i][21],
                    "syllabusCode": str(data[i][22]),
                    "moduleCode": str(data[i][23]),
                    "mod_name": str(data[i][24]),
                    "mod_creditHour": data[i][25],
                    "mod_type": str(data[i][26]),
                    "mod_labIncluded": data[i][27],
                    "mod_mejor": data[i][28],
                    "mod_group": str(data[i][29]),
                    "mod_prerequisite": str(data[i][30]),
                    "mod_sequence": str(data[i][31]),
                    "mod_shortName": str(data[i][32]),
                    "final" : final_marks
                }
                module_regi_details[moduleRegistrationID] = regi_data
            return module_regi_details
        except:
            print("Data Not Found")

    def format_final_marks_dict(self, data):
        try:
            term_details = {}        
            for i in range(0, len(data)):
                termAdmissionID = data[i][0]
                term_data = {    
                    "examinationID": data[i][0],
                    "moduleRegistrationID": data[i][1], 
                    "emr_date": f"{data[i][2]}",                   
                    "emr_mark": data[i][3], 
                    "emr_absent":f"{data[i][4]}",       
                    "facultyID": data[i][5], 
                    "supple_regi_date": f"{data[i][6]}",
                    "userID": data[i][7],
                    "emr_complete":f"{data[i][8]}",       
                    "emr_publish":f"{data[i][9]}",     
                }
                term_details[termAdmissionID] = term_data
            return term_details
        except:
             print("Data not found")

    def insert_data(self, student_id, term_admission_details, moduleregistration_details):
        # Convert the Python dictionary to a JSONB object
        term_admission_details_jsonb = json.dumps(term_admission_details)
        moduleregistration_details_jsonb = json.dumps(moduleregistration_details)

        # Insert data into the table
        insert_query = sql.SQL("""
            INSERT INTO tbl_ae_term_admission_bkp("studentID", "term_admission_details", "moduleregistration_details")
            VALUES (%s, %s::jsonb , %s::jsonb)
            ON CONFLICT ("studentID") DO UPDATE 
            SET 
                "term_admission_details" = excluded."term_admission_details",
                "moduleregistration_details" = excluded."moduleregistration_details";
        """)

        # Execute the query
        self.cursor.execute(insert_query, (
            student_id, term_admission_details_jsonb, moduleregistration_details_jsonb
        ))

        # Commit the changes
        self.conn.commit()

    def get_awarded_list(self):
            # Execute the query
            query = f"""
                SELECT "studentID" FROM public.tbl_ae_degreeawarded;"""
            self.cursor.execute(query)           
                # Fetch all rows
            result = self.cursor.fetchall()
                
                # Print the report
            if result:
                return result
            else:
                print("No data retrieved for the report")


    
    
    def individual_dump_data(self):
        try:
            
            #self.create_term_admission_table()
            #student_list = admission.get_student_list()
            list = self.get_awarded_list()   
            id = '181-115-003'
            term = self.get_term_admission(id)  
            module = self.get_module_registration(id)  
            final = self.get_exam_marks(id)
            
            term_details = self.format_term_admission_details_dict(term)   
                        
            #json_data = json.dumps(term_details, indent=4)

            # Display JSON data
            #print(json_data)
            #print(f"Course details for student :\n{data}")
            #module_details = self.format_moduleregistration_details(module)
                #print(module_details)
            #final_details = self.format_final_marks_dict(final)
            #print(module)           
            
        except:
            print("Something wrong!")
        return  term_details

    def dump_data(self):
        try:
            
            self.create_term_admission_table()
        #student_list = admission.get_student_list()
            list = self.get_awarded_list()   
            
            for i in range(0, len(list)):        
                id = list[i][0]
                term = self.get_term_admission(id)  
                module = self.get_module_registration(id)  
                final = self.get_exam_marks(id)
                #print("Created")
                #print(term)
                #print(module)
                term_details = self.format_term_admission_details_dict(term)    
                #print(term_details)
                module_details = self.format_moduleregistration_details(module)
                #print(module_details)
                final_details = self.format_final_marks_dict(final)
                #print(id)
                #print(final_details)
                #self.insert_data(id, term_details, module_details)
                id = ''
        except:
            print("Something wrong!")

    
def main():
    try:
        dbname = "db_muERPv8p0"
        user = "postgres"
        password = "success8085.com"
        host = "localhost"
        port = "5432"
        connection = db.connect_to_database(dbname, user, password, host, port)
        display_large_text("Tools")
        main_menu()    
        admission = TermAdmission(_conn=connection)
        choice = input("\nEnter your choice (1-2): ")
        if choice== "1":                
            id = input("Enter Student ID:")
            data = admission.reterive_data(id)
            print(data)
            data = admission.format_retrieve_data(data)
            print(f"Course details for student :\n{data}")
        elif choice == "2":
            admission.dump_data()    
        elif choice == "3":
            admission.individual_dump_data()    
        else:
            print("Wrong Choice")
    
    except:
         print("Something wrong!")


def display_large_text(text):
    figlet = Figlet()
    large_text = figlet.renderText(text)
    print(large_text)

def print_header(text):
    print(Fore.YELLOW + Style.BRIGHT + f"\n=== {text} ===" + Style.RESET_ALL)

def main_menu():
    print_header("Tools Menu")
    data =[ ("1. Find Data", "2. Dump Data", "3. Individual Dump Data"),             
            ("7. ", "8. ", "9. ")
          ]
    #field_names = ["Item", "Item", "Item"]
    #helper.view_data(data, field_names)
    # Create a PrettyTable object
    table = PrettyTable()
    #table.field_names = field_names
    # Define column names
   # table.field_names = field_names

    for row in data:        
        table.add_row(row)
    print(Fore.CYAN + str(table) + Style.RESET_ALL)



@app.route('/data', methods=['GET'])
def get_data():
    dbname = "db_muERPv8p0"
    user = "postgres"
    password = "success8085.com"
    host = "localhost"
    port = "5432"
    connection = db.connect_to_database(dbname, user, password, host, port)
    admission = TermAdmission(_conn=connection)
    term_data = admission.individual_dump_data()    
    return jsonify(term_data)

if __name__ == '__main__':
    app.run(debug=True)
